{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:18:48.516Z"}
{"level":"info","message":"::1 - - [28/May/2025:05:19:04 +0000] \"GET /api/meal-plan/generate HTTP/1.1\" 404 161 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\"","timestamp":"2025-05-28T05:19:04.579Z"}
{"level":"info","message":"::1 - - [28/May/2025:05:19:06 +0000] \"GET /serviceWorker.js HTTP/1.1\" 404 155 \"http://localhost:3000/serviceWorker.js\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\"","timestamp":"2025-05-28T05:19:06.733Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:25:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:39:28)","timestamp":"2025-05-28T05:19:29.009Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:19:57.792Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:20:00.186Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:20:03.618Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:25:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:39:28)","timestamp":"2025-05-28T05:20:09.902Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:20:29.880Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:25:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:39:28)","timestamp":"2025-05-28T05:21:44.235Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:34:23.625Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:36:28.947Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:42:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:39:28)","timestamp":"2025-05-28T05:37:12.373Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:38:34.760Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:38:36.342Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:42:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:39:28)","timestamp":"2025-05-28T05:38:59.562Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:42:12.216Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:42:48.301Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:42:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:49:28)","timestamp":"2025-05-28T05:43:21.510Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:44:42.173Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:44:47.515Z"}
{"level":"error","message":"Error getting nutrition data for breakfast: meal.ingredients.join is not a function","stack":"TypeError: meal.ingredients.join is not a function\n    at generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:60:54)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-05-28T05:50:52.533Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T05:53:14.504Z"}
{"level":"error","message":"Error getting nutrition data for breakfast: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:23.618Z"}
{"level":"error","message":"Error getting nutrition data for lunch: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:23.945Z"}
{"level":"error","message":"Error getting nutrition data for dinner: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:24.267Z"}
{"level":"error","message":"Error getting nutrition data for snack: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:24.590Z"}
{"level":"error","message":"Error getting nutrition data for breakfast: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:24.948Z"}
{"level":"error","message":"Error getting nutrition data for lunch: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:25.294Z"}
{"level":"error","message":"Error getting nutrition data for dinner: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:25.619Z"}
{"level":"error","message":"Error getting nutrition data for snack: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:25.953Z"}
{"level":"error","message":"Error getting nutrition data for breakfast: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:26.285Z"}
{"level":"error","message":"Error getting nutrition data for lunch: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:26.610Z"}
{"level":"error","message":"Error getting nutrition data for dinner: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:26.940Z"}
{"level":"error","message":"Error getting nutrition data for snack: Failed to get nutrition data from FatSecret API","stack":"Error: Failed to get nutrition data from FatSecret API\n    at FatSecretService.getNutritionData (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\fatsecretService.js:122:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:67:35)","timestamp":"2025-05-28T05:57:27.256Z"}
{"level":"error","message":"Error saving to local storage: localStorage is not defined","stack":"ReferenceError: localStorage is not defined\n    at DummyDataService.saveToLocalStorage (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\dummyDataService.js:112:7)\n    at generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:130:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-05-28T05:57:27.260Z"}
{"level":"info","message":"::1 - - [28/May/2025:05:57:27 +0000] \"POST /api/meal-plan/generate HTTP/1.1\" 200 - \"-\" \"PostmanRuntime/7.44.0\"","timestamp":"2025-05-28T05:57:27.277Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T06:04:21.466Z"}
{"level":"info","message":"Data saved to files successfully","timestamp":"2025-05-28T06:10:33.269Z"}
{"level":"info","message":"::1 - - [28/May/2025:06:10:33 +0000] \"POST /api/meal-plan/generate HTTP/1.1\" 200 - \"-\" \"PostmanRuntime/7.44.0\"","timestamp":"2025-05-28T06:10:33.283Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T06:10:34.874Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T06:52:26.575Z"}
{"level":"error","message":"Error in generateMealPlan: Failed to generate meal plan","stack":"Error: Failed to generate meal plan\n    at LLMService.generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\services\\llmService.js:42:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async generateMealPlan (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\controllers\\mealPlanController.js:49:28)","timestamp":"2025-05-28T06:54:26.538Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T07:13:33.291Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T07:25:57.092Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T07:26:38.775Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T07:26:40.973Z"}
{"level":"info","message":"Data saved to files successfully","timestamp":"2025-05-28T07:33:43.596Z"}
{"level":"info","message":"::1 - - [28/May/2025:07:33:43 +0000] \"POST /api/meal-plan/generate HTTP/1.1\" 200 - \"-\" \"PostmanRuntime/7.44.0\"","timestamp":"2025-05-28T07:33:43.620Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T07:33:44.889Z"}
{"level":"info","message":"::1 - - [28/May/2025:11:51:09 +0000] \"GET /serviceWorker.js HTTP/1.1\" 404 155 \"http://localhost:3000/serviceWorker.js\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36\"","timestamp":"2025-05-28T11:51:09.193Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T13:46:37.402Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T14:15:40.878Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T14:26:33.027Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:08:26.650Z"}
{"level":"error","message":"Unable to connect to the database: password authentication failed for user 'neondb_owner'","name":"SequelizeConnectionError","original":{"code":"XX000","length":75,"name":"error","severity":"ERROR"},"parent":{"code":"XX000","length":75,"name":"error","severity":"ERROR"},"stack":"SequelizeConnectionError: password authentication failed for user 'neondb_owner'\n    at Client._connectionCallback (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\connection-manager.js:145:24)\n    at Client._handleErrorWhileConnecting (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:336:19)\n    at Client._handleErrorMessage (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:356:19)\n    at Connection.emit (node:events:518:28)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\connection.js:116:12\n    at Parser.parse (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg-protocol\\dist\\parser.js:36:17)\n    at TLSSocket.<anonymous> (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg-protocol\\dist\\index.js:11:42)\n    at TLSSocket.emit (node:events:518:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)","timestamp":"2025-05-28T15:08:27.393Z"}
{"level":"error","message":"Failed to sync database: password authentication failed for user 'neondb_owner'","name":"SequelizeConnectionError","original":{"code":"XX000","length":75,"name":"error","severity":"ERROR"},"parent":{"code":"XX000","length":75,"name":"error","severity":"ERROR"},"stack":"SequelizeConnectionError: password authentication failed for user 'neondb_owner'\n    at Client._connectionCallback (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\connection-manager.js:145:24)\n    at Client._handleErrorWhileConnecting (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:336:19)\n    at Client._handleErrorMessage (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:356:19)\n    at Connection.emit (node:events:518:28)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\connection.js:116:12\n    at Parser.parse (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg-protocol\\dist\\parser.js:36:17)\n    at TLSSocket.<anonymous> (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg-protocol\\dist\\index.js:11:42)\n    at TLSSocket.emit (node:events:518:28)\n    at addChunk (node:internal/streams/readable:559:12)\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)","timestamp":"2025-05-28T15:08:27.394Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:16:10.428Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:16:14.048Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:16:37.967Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:16:40.415Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:16:42.020Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:16:57.627Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:16:59.270Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:17:01.112Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:17:02.902Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:17:12.559Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"MealPlans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_MealPlans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE, \"updatedAt\" TIMESTAMP WITH TIME ZONE, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:17:14.189Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:17:25.373Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"meal_plans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_meal_plans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"meal_plans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_meal_plans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"meal_plans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_meal_plans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:17:27.262Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:32:30.853Z"}
{"level":"error","message":"Failed to sync database: relation \"users\" does not exist","name":"SequelizeDatabaseError","original":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"meal_plans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_meal_plans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));"},"parameters":{},"parent":{"code":"42P01","file":"namespace.c","length":103,"line":"636","name":"error","routine":"RangeVarGetRelidExtended","severity":"ERROR","sql":"CREATE TABLE IF NOT EXISTS \"meal_plans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_meal_plans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));"},"sql":"CREATE TABLE IF NOT EXISTS \"meal_plans\" (\"id\" UUID , \"userId\" UUID NOT NULL REFERENCES \"users\" (\"id\"), \"planData\" JSONB NOT NULL, \"startDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"endDate\" TIMESTAMP WITH TIME ZONE NOT NULL, \"status\" \"public\".\"enum_meal_plans_status\" DEFAULT 'active', \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));","stack":"Error\n    at Query.run (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:50:25)\n    at C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:315:28\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PostgresQueryInterface.createTable (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-interface.js:98:12)\n    at async MealPlan.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\model.js:942:7)\n    at async Sequelize.sync (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\sequelize.js:377:9)\n    at async C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\app.js:16:5","timestamp":"2025-05-28T15:32:33.932Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:33:06.814Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:33:09.463Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:33:11.547Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:33:33.004Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:33:34.877Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:33:38.983Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:33:40.605Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:33:48.590Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:33:50.507Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:02.863Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:04.664Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:08.045Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:09.791Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:32.727Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:34.542Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:36.424Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:38.112Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:41.278Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:43.097Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:44.654Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:46.561Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:36:53.712Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:36:55.468Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:37:10.064Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:37:12.047Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:37:17.197Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:37:18.930Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:37:26.174Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:37:28.062Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:37:38.817Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:37:41.582Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:38:11.674Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:38:13.638Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:38:32.108Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:38:34.058Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:39:39.864Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:39:41.712Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:39:57.350Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:40:00.097Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:40:01.817Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:40:05.937Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:40:09.013Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:40:10.680Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:40:17.614Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:40:27.148Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:40:29.073Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:11.972Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:14.656Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:41:16.504Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:19.214Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:21.124Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:41:22.762Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:35.675Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:41:37.651Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:39.973Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:41:41.701Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:41:55.500Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:41:57.328Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:42:02.943Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:42:05.414Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:42:07.213Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:42:34.537Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:42:36.520Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:42:45.361Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:42:47.648Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:42:51.559Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:42:53.590Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:43:08.016Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:43:09.704Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:43:15.333Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:43:17.048Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:43:23.269Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:43:25.989Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:43:27.723Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:43:42.708Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:43:44.498Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:43:46.568Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:43:48.353Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:44:05.843Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:44:07.580Z"}
{"level":"info","message":"::1 - - [28/May/2025:15:44:18 +0000] \"POST /api/meal-plan/generate HTTP/1.1\" 404 162 \"-\" \"PostmanRuntime/7.44.0\"","timestamp":"2025-05-28T15:44:18.567Z"}
{"level":"info","message":"::1 - - [28/May/2025:15:45:08 +0000] \"POST /api/meal-plans HTTP/1.1\" 404 154 \"-\" \"PostmanRuntime/7.44.0\"","timestamp":"2025-05-28T15:45:08.360Z"}
{"level":"info","message":"::1 - - [28/May/2025:15:46:22 +0000] \"POST /api/meal-plans HTTP/1.1\" 404 154 \"-\" \"PostmanRuntime/7.44.0\"","timestamp":"2025-05-28T15:46:22.273Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:49:20.279Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:49:23.328Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:49:31.428Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:49:36.565Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:49:38.409Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:49:43.898Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:49:43.913Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:49:45.630Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:50:12.113Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:50:12.128Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:50:14.090Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:50:17.127Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:50:17.149Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:50:18.945Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:50:30.393Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:50:30.408Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:50:32.104Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:50:33.728Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:50:33.744Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:50:35.475Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:51:18.454Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:51:18.469Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:51:20.344Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:53:09.662Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:53:09.685Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:53:13.167Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:53:13.181Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:53:14.927Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:53:24.262Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:53:24.282Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:53:26.039Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:53:28.342Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:53:28.366Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:53:30.085Z"}
{"body":{"activity":"moderate","age":30,"allergies":["peanuts"],"avoid":["pork","shellfish"],"cuisinePreference":"mediterranean","dailyCalories":2000,"gender":"male","goal":"weight_loss","height":175,"macroSplit":"40-30-30","name":"John Doe","userId":"1","weight":75},"ip":"::1","level":"info","message":"Incoming request:","method":"POST","path":"/","query":{},"timestamp":"2025-05-28T15:53:36.473Z","userAgent":"PostmanRuntime/7.44.0"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:55:35.027Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:55:35.040Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:55:37.214Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:55:37.233Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:55:38.887Z"}
{"body":{"activity":"moderate","age":30,"allergies":["peanuts"],"avoid":["pork","shellfish"],"cuisinePreference":"mediterranean","dailyCalories":2000,"gender":"male","goal":"weight_loss","height":175,"macroSplit":"40-30-30","name":"John Doe","userId":"1","weight":75},"ip":"::1","level":"info","message":"Incoming request:","method":"POST","path":"/","query":{},"timestamp":"2025-05-28T15:55:43.188Z","userAgent":"PostmanRuntime/7.44.0"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:57:33.404Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:57:33.418Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:57:35.063Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:57:37.587Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:57:37.603Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:57:39.841Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:57:39.862Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:57:41.572Z"}
{"body":{"activity":"moderate","age":30,"allergies":["peanuts"],"avoid":["pork","shellfish"],"cuisinePreference":"mediterranean","dailyCalories":2000,"gender":"male","goal":"weight_loss","height":175,"macroSplit":"40-30-30","name":"John Doe","userId":"1","weight":75},"ip":"::1","level":"info","message":"Incoming request:","method":"POST","path":"/","query":{},"timestamp":"2025-05-28T15:58:06.120Z","userAgent":"PostmanRuntime/7.44.0"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:58:56.242Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:58:56.258Z"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:58:58.632Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:58:58.650Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:59:00.498Z"}
{"body":{"activity":"moderate","age":30,"allergies":["peanuts"],"avoid":["pork","shellfish"],"cuisinePreference":"mediterranean","dailyCalories":2000,"gender":"male","goal":"weight_loss","height":175,"macroSplit":"40-30-30","name":"John Doe","userId":"1","weight":75},"ip":"::1","level":"info","message":"Incoming request:","method":"POST","path":"/","query":{},"timestamp":"2025-05-28T15:59:09.560Z","userAgent":"PostmanRuntime/7.44.0"}
{"level":"info","message":"Initializing NutritionCache with 24-hour TTL","timestamp":"2025-05-28T15:59:13.437Z"}
{"level":"info","message":"Server running on port 3000","timestamp":"2025-05-28T15:59:13.453Z"}
{"level":"info","message":"Database synchronized successfully","timestamp":"2025-05-28T15:59:15.380Z"}
{"body":{"activity":"moderate","age":30,"allergies":["peanuts"],"avoid":["pork","shellfish"],"cuisinePreference":"mediterranean","dailyCalories":2000,"gender":"male","goal":"weight_loss","height":175,"macroSplit":"40-30-30","name":"John Doe","userId":"1","weight":75},"ip":"::1","level":"info","message":"Incoming request:","method":"POST","path":"/","query":{},"timestamp":"2025-05-28T15:59:21.429Z","userAgent":"PostmanRuntime/7.44.0"}
{"level":"info","message":"Meal plan validation successful","timestamp":"2025-05-28T15:59:21.430Z"}
{"level":"info","message":"Generating new meal plan","timestamp":"2025-05-28T15:59:21.431Z"}
{"level":"info","message":"User data validated successfully","timestamp":"2025-05-28T15:59:21.433Z"}
{"level":"info","message":"Generating meal plan prompt","timestamp":"2025-05-28T15:59:21.435Z"}
{"level":"info","message":"Generating meal plan prompt","name":"John Doe","timestamp":"2025-05-28T15:59:21.435Z"}
{"level":"info","message":"Generating meal plan with LLM","timestamp":"2025-05-28T15:59:21.436Z"}
{"level":"info","message":"Starting meal plan generation with LLM...","timestamp":"2025-05-28T15:59:21.437Z"}
2025-05-28 21:31:05 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:31:05 info: Server running on port 3000 
2025-05-28 21:31:07 info: Database synchronized successfully 
2025-05-28 21:31:17 info: Incoming request: {"method":"POST","path":"/","query":{},"body":{"name":"John Doe","age":30,"gender":"male","height":175,"weight":75,"activity":"moderate","goal":"weight_loss","dailyCalories":2000,"macroSplit":"40-30-30","cuisinePreference":"mediterranean","allergies":["peanuts"],"avoid":["pork","shellfish"],"userId":"1"},"ip":"::1","userAgent":"PostmanRuntime/7.44.0"}
2025-05-28 21:31:17 info: Meal plan validation successful 
2025-05-28 21:31:17 info: Generating new meal plan 
2025-05-28 21:31:17 info: User data validated successfully 
2025-05-28 21:31:17 info: Generating meal plan prompt 
2025-05-28 21:31:17 info: Generating meal plan prompt {"name":"John Doe"}
2025-05-28 21:31:17 info: Generating meal plan with LLM 
2025-05-28 21:31:17 info: Starting meal plan generation with LLM... 
2025-05-28 21:35:34 info: Received response from LLM API 
2025-05-28 21:35:34 info: Cleaning JSON response... 
2025-05-28 21:35:34 info: Starting JSON cleaning process... 
2025-05-28 21:35:34 info: No valid JSON in code blocks, searching for JSON patterns... 
2025-05-28 21:35:34 info: Found JSON object pattern 
2025-05-28 21:35:34 info: Attempting to parse JSON as is... 
2025-05-28 21:35:34 info: Parsing JSON response... 
2025-05-28 21:35:34 info: JSON parsed successfully 
2025-05-28 21:35:34 info: Creating meal plan in database 
2025-05-28 21:35:35 info: Meal plan generated successfully: {"id":"d981f47b-522c-449e-8373-bbcbbf8fc7f7"}
2025-05-28 21:35:35 info: ::1 - - [28/May/2025:16:05:35 +0000] "POST /api/meal-plans HTTP/1.1" 201 - "-" "PostmanRuntime/7.44.0" 
2025-05-28 21:35:35 info: Request completed: {"method":"POST","path":"/","statusCode":201,"duration":"258458ms"}
2025-05-28 21:40:05 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:40:05 info: Server running on port 3000 
2025-05-28 21:40:09 info: Database synchronized successfully 
2025-05-28 21:43:40 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:43:40 info: Server running on port 3000 
2025-05-28 21:43:42 info: Database synchronized successfully 
2025-05-28 21:43:59 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:43:59 info: Server running on port 3000 
2025-05-28 21:44:01 info: Database synchronized successfully 
2025-05-28 21:44:05 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:44:05 info: Server running on port 3000 
2025-05-28 21:44:07 info: Database synchronized successfully 
2025-05-28 21:44:11 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:44:11 info: Server running on port 3000 
2025-05-28 21:44:15 info: Database synchronized successfully 
2025-05-28 21:44:17 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:44:17 info: Server running on port 3000 
2025-05-28 21:44:19 info: Database synchronized successfully 
2025-05-28 21:52:46 info: Incoming request: {"method":"POST","path":"/","query":{},"body":{"name":"John Doe","age":30,"gender":"male","height":175,"weight":75,"activity":"moderate","goal":"weight_loss","dailyCalories":2000,"macroSplit":"40-30-30","cuisinePreference":"mediterranean","allergies":["peanuts"],"avoid":["pork","shellfish"],"userId":"1"},"ip":"::1","userAgent":"PostmanRuntime/7.44.0"}
2025-05-28 21:52:46 info: Meal plan validation successful 
2025-05-28 21:52:46 info: Generating new meal plan 
2025-05-28 21:52:46 info: User data validated successfully 
2025-05-28 21:52:46 info: Generating meal plan prompt 
2025-05-28 21:52:46 info: Generating meal plan prompt {"name":"John Doe"}
2025-05-28 21:52:46 info: Generating meal plan with LLM 
2025-05-28 21:52:46 info: Starting meal plan generation with LLM... 
2025-05-28 21:54:52 info: Received response from LLM API 
2025-05-28 21:54:52 info: Cleaning JSON response... 
2025-05-28 21:54:52 info: Starting JSON cleaning process... 
2025-05-28 21:54:52 info: No valid JSON in code blocks, searching for JSON patterns... 
2025-05-28 21:54:52 info: Found JSON object pattern 
2025-05-28 21:54:52 info: Attempting to parse JSON as is... 
2025-05-28 21:54:52 info: Parsing JSON response... 
2025-05-28 21:54:52 info: JSON parsed successfully 
2025-05-28 21:54:52 info: Fetching nutrition data for meals 
2025-05-28 21:54:52 info: Starting meal plan enrichment with nutrition data 
2025-05-28 21:54:52 info: Fetching nutrition data for ingredients: {"ingredients":["3 eggs","100g spinach","100g cherry tomatoes","1 slice whole grain bread","1 tbsp olive oil"]}
2025-05-28 21:54:52 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:54:52 info: Requesting new FatSecret access token 
2025-05-28 21:54:54 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:54 error: Error getting nutrition data: {"food":"3 eggs","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:54 info: Requesting new FatSecret access token 
2025-05-28 21:54:54 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:54 error: Error getting nutrition data: {"food":"100g spinach","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:54 info: Requesting new FatSecret access token 
2025-05-28 21:54:55 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:55 error: Error getting nutrition data: {"food":"100g cherry tomatoes","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:55 info: Requesting new FatSecret access token 
2025-05-28 21:54:55 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:55 error: Error getting nutrition data: {"food":"1 slice whole grain bread","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:55 info: Requesting new FatSecret access token 
2025-05-28 21:54:55 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:55 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:55 info: Batch nutrition data retrieval complete: {"found":0,"missing":5}
2025-05-28 21:54:55 warn: Missing nutrition data for some ingredients: {"missing":["3 eggs","100g spinach","100g cherry tomatoes","1 slice whole grain bread","1 tbsp olive oil"]}
2025-05-28 21:54:55 info: Fetching nutrition data for ingredients: {"ingredients":["200g lentils","100g tomato","100g onion","1 tbsp olive oil","1 slice whole grain bread"]}
2025-05-28 21:54:55 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:54:55 info: Requesting new FatSecret access token 
2025-05-28 21:54:56 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:56 error: Error getting nutrition data: {"food":"200g lentils","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:56 info: Requesting new FatSecret access token 
2025-05-28 21:54:56 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:56 error: Error getting nutrition data: {"food":"100g tomato","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:56 info: Requesting new FatSecret access token 
2025-05-28 21:54:56 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:56 error: Error getting nutrition data: {"food":"100g onion","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:56 info: Requesting new FatSecret access token 
2025-05-28 21:54:57 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:57 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:57 info: Requesting new FatSecret access token 
2025-05-28 21:54:57 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:57 error: Error getting nutrition data: {"food":"1 slice whole grain bread","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:57 info: Batch nutrition data retrieval complete: {"found":0,"missing":5}
2025-05-28 21:54:57 warn: Missing nutrition data for some ingredients: {"missing":["200g lentils","100g tomato","100g onion","1 tbsp olive oil","1 slice whole grain bread"]}
2025-05-28 21:54:57 info: Fetching nutrition data for ingredients: {"ingredients":["200g chicken breast","100g quinoa","150g mixed vegetables (broccoli","zucchini","bell peppers)","1 tbsp olive oil"]}
2025-05-28 21:54:57 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:54:57 info: Requesting new FatSecret access token 
2025-05-28 21:54:57 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:57 error: Error getting nutrition data: {"food":"200g chicken breast","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:57 info: Requesting new FatSecret access token 
2025-05-28 21:54:58 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:58 error: Error getting nutrition data: {"food":"100g quinoa","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:58 info: Requesting new FatSecret access token 
2025-05-28 21:54:58 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:58 error: Error getting nutrition data: {"food":"150g mixed vegetables (broccoli","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:58 info: Requesting new FatSecret access token 
2025-05-28 21:54:58 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:58 error: Error getting nutrition data: {"food":"zucchini","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:58 info: Requesting new FatSecret access token 
2025-05-28 21:54:59 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:59 error: Error getting nutrition data: {"food":"bell peppers)","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:59 info: Requesting new FatSecret access token 
2025-05-28 21:54:59 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:59 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:59 info: Batch nutrition data retrieval complete: {"found":0,"missing":6}
2025-05-28 21:54:59 warn: Missing nutrition data for some ingredients: {"missing":["200g chicken breast","100g quinoa","150g mixed vegetables (broccoli","zucchini","bell peppers)","1 tbsp olive oil"]}
2025-05-28 21:54:59 info: Fetching nutrition data for ingredients: {"ingredients":["2 tbsp hummus","100g carrots"]}
2025-05-28 21:54:59 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:54:59 info: Requesting new FatSecret access token 
2025-05-28 21:54:59 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:54:59 error: Error getting nutrition data: {"food":"2 tbsp hummus","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:54:59 info: Requesting new FatSecret access token 
2025-05-28 21:55:00 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:00 error: Error getting nutrition data: {"food":"100g carrots","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:00 info: Batch nutrition data retrieval complete: {"found":0,"missing":2}
2025-05-28 21:55:00 warn: Missing nutrition data for some ingredients: {"missing":["2 tbsp hummus","100g carrots"]}
2025-05-28 21:55:00 info: Fetching nutrition data for ingredients: {"ingredients":["200g non-fat Greek yogurt","100g mixed berries","10g almonds","2 tsp honey"]}
2025-05-28 21:55:00 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:00 info: Requesting new FatSecret access token 
2025-05-28 21:55:00 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:00 error: Error getting nutrition data: {"food":"200g non-fat Greek yogurt","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:00 info: Requesting new FatSecret access token 
2025-05-28 21:55:00 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:00 error: Error getting nutrition data: {"food":"100g mixed berries","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:00 info: Requesting new FatSecret access token 
2025-05-28 21:55:01 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:01 error: Error getting nutrition data: {"food":"10g almonds","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:01 info: Requesting new FatSecret access token 
2025-05-28 21:55:01 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:01 error: Error getting nutrition data: {"food":"2 tsp honey","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:01 info: Batch nutrition data retrieval complete: {"found":0,"missing":4}
2025-05-28 21:55:01 warn: Missing nutrition data for some ingredients: {"missing":["200g non-fat Greek yogurt","100g mixed berries","10g almonds","2 tsp honey"]}
2025-05-28 21:55:01 info: Fetching nutrition data for ingredients: {"ingredients":["150g canned tuna (in water)","100g mixed greens","100g cucumber","20g olives","1 tbsp olive oil"]}
2025-05-28 21:55:01 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:01 info: Requesting new FatSecret access token 
2025-05-28 21:55:01 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:01 error: Error getting nutrition data: {"food":"150g canned tuna (in water)","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:01 info: Requesting new FatSecret access token 
2025-05-28 21:55:02 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:02 error: Error getting nutrition data: {"food":"100g mixed greens","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:02 info: Requesting new FatSecret access token 
2025-05-28 21:55:02 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:02 error: Error getting nutrition data: {"food":"100g cucumber","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:02 info: Requesting new FatSecret access token 
2025-05-28 21:55:02 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:02 error: Error getting nutrition data: {"food":"20g olives","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:02 info: Requesting new FatSecret access token 
2025-05-28 21:55:03 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:03 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:03 info: Batch nutrition data retrieval complete: {"found":0,"missing":5}
2025-05-28 21:55:03 warn: Missing nutrition data for some ingredients: {"missing":["150g canned tuna (in water)","100g mixed greens","100g cucumber","20g olives","1 tbsp olive oil"]}
2025-05-28 21:55:03 info: Fetching nutrition data for ingredients: {"ingredients":["150g salmon","100g quinoa","150g roasted asparagus and bell peppers","1 tbsp olive oil"]}
2025-05-28 21:55:03 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:03 info: Requesting new FatSecret access token 
2025-05-28 21:55:03 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:03 error: Error getting nutrition data: {"food":"150g salmon","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:03 info: Requesting new FatSecret access token 
2025-05-28 21:55:03 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:03 error: Error getting nutrition data: {"food":"100g quinoa","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:03 info: Requesting new FatSecret access token 
2025-05-28 21:55:04 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:04 error: Error getting nutrition data: {"food":"150g roasted asparagus and bell peppers","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:04 info: Requesting new FatSecret access token 
2025-05-28 21:55:04 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:04 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:04 info: Batch nutrition data retrieval complete: {"found":0,"missing":4}
2025-05-28 21:55:04 warn: Missing nutrition data for some ingredients: {"missing":["150g salmon","100g quinoa","150g roasted asparagus and bell peppers","1 tbsp olive oil"]}
2025-05-28 21:55:04 info: Fetching nutrition data for ingredients: {"ingredients":["1 banana","1 cup almond milk","1 scoop whey protein","1 cup spinach"]}
2025-05-28 21:55:04 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:04 info: Requesting new FatSecret access token 
2025-05-28 21:55:04 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:04 error: Error getting nutrition data: {"food":"1 banana","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:04 info: Requesting new FatSecret access token 
2025-05-28 21:55:05 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:05 error: Error getting nutrition data: {"food":"1 cup almond milk","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:05 info: Requesting new FatSecret access token 
2025-05-28 21:55:05 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:05 error: Error getting nutrition data: {"food":"1 scoop whey protein","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:05 info: Requesting new FatSecret access token 
2025-05-28 21:55:05 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:05 error: Error getting nutrition data: {"food":"1 cup spinach","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:05 info: Batch nutrition data retrieval complete: {"found":0,"missing":4}
2025-05-28 21:55:05 warn: Missing nutrition data for some ingredients: {"missing":["1 banana","1 cup almond milk","1 scoop whey protein","1 cup spinach"]}
2025-05-28 21:55:05 info: Fetching nutrition data for ingredients: {"ingredients":["1 slice whole grain bread","1/2 avocado","100g cherry tomatoes","1 tbsp olive oil"]}
2025-05-28 21:55:05 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:05 info: Requesting new FatSecret access token 
2025-05-28 21:55:06 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:06 error: Error getting nutrition data: {"food":"1 slice whole grain bread","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:06 info: Requesting new FatSecret access token 
2025-05-28 21:55:06 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:06 error: Error getting nutrition data: {"food":"1/2 avocado","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:06 info: Requesting new FatSecret access token 
2025-05-28 21:55:06 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:06 error: Error getting nutrition data: {"food":"100g cherry tomatoes","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:06 info: Requesting new FatSecret access token 
2025-05-28 21:55:07 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:07 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:07 info: Batch nutrition data retrieval complete: {"found":0,"missing":4}
2025-05-28 21:55:07 warn: Missing nutrition data for some ingredients: {"missing":["1 slice whole grain bread","1/2 avocado","100g cherry tomatoes","1 tbsp olive oil"]}
2025-05-28 21:55:07 info: Fetching nutrition data for ingredients: {"ingredients":["100g quinoa","150g chickpeas","100g cucumber","50g feta cheese","1 tbsp olive oil"]}
2025-05-28 21:55:07 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:07 info: Requesting new FatSecret access token 
2025-05-28 21:55:07 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:07 error: Error getting nutrition data: {"food":"100g quinoa","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:07 info: Requesting new FatSecret access token 
2025-05-28 21:55:07 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:07 error: Error getting nutrition data: {"food":"150g chickpeas","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:07 info: Requesting new FatSecret access token 
2025-05-28 21:55:08 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:08 error: Error getting nutrition data: {"food":"100g cucumber","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:08 info: Requesting new FatSecret access token 
2025-05-28 21:55:08 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:08 error: Error getting nutrition data: {"food":"50g feta cheese","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:08 info: Requesting new FatSecret access token 
2025-05-28 21:55:08 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:08 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:08 info: Batch nutrition data retrieval complete: {"found":0,"missing":5}
2025-05-28 21:55:08 warn: Missing nutrition data for some ingredients: {"missing":["100g quinoa","150g chickpeas","100g cucumber","50g feta cheese","1 tbsp olive oil"]}
2025-05-28 21:55:08 info: Fetching nutrition data for ingredients: {"ingredients":["2 bell peppers","150g ground turkey (avoid pork)","100g brown rice","100g black beans","1 tbsp olive oil"]}
2025-05-28 21:55:08 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:08 info: Requesting new FatSecret access token 
2025-05-28 21:55:09 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:09 error: Error getting nutrition data: {"food":"2 bell peppers","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:09 info: Requesting new FatSecret access token 
2025-05-28 21:55:09 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:09 error: Error getting nutrition data: {"food":"150g ground turkey (avoid pork)","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:09 info: Requesting new FatSecret access token 
2025-05-28 21:55:09 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:09 error: Error getting nutrition data: {"food":"100g brown rice","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:09 info: Requesting new FatSecret access token 
2025-05-28 21:55:10 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:10 error: Error getting nutrition data: {"food":"100g black beans","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:10 info: Requesting new FatSecret access token 
2025-05-28 21:55:10 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:10 error: Error getting nutrition data: {"food":"1 tbsp olive oil","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:10 info: Batch nutrition data retrieval complete: {"found":0,"missing":5}
2025-05-28 21:55:10 warn: Missing nutrition data for some ingredients: {"missing":["2 bell peppers","150g ground turkey (avoid pork)","100g brown rice","100g black beans","1 tbsp olive oil"]}
2025-05-28 21:55:10 info: Fetching nutrition data for ingredients: {"ingredients":["30g almonds","20g walnuts"]}
2025-05-28 21:55:10 info: Getting batch nutrition data for multiple foods 
2025-05-28 21:55:10 info: Requesting new FatSecret access token 
2025-05-28 21:55:10 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:10 error: Error getting nutrition data: {"food":"30g almonds","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:10 info: Requesting new FatSecret access token 
2025-05-28 21:55:11 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_scope"}}
2025-05-28 21:55:11 error: Error getting nutrition data: {"food":"20g walnuts","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:55:11 info: Batch nutrition data retrieval complete: {"found":0,"missing":2}
2025-05-28 21:55:11 warn: Missing nutrition data for some ingredients: {"missing":["30g almonds","20g walnuts"]}
2025-05-28 21:55:11 info: Meal plan enrichment completed 
2025-05-28 21:55:11 info: Nutrition data fetched successfully 
2025-05-28 21:55:11 info: Creating meal plan in database 
2025-05-28 21:55:13 info: Meal plan generated successfully: {"id":"d1882afe-34a2-4ebf-b4f7-aa900ca6526f"}
2025-05-28 21:55:13 info: ::1 - - [28/May/2025:16:25:13 +0000] "POST /api/meal-plans HTTP/1.1" 201 - "-" "PostmanRuntime/7.44.0" 
2025-05-28 21:55:13 info: Request completed: {"method":"POST","path":"/","statusCode":201,"duration":"147588ms"}
2025-05-28 21:57:13 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:57:13 info: Server running on port 3000 
2025-05-28 21:57:17 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:57:17 info: Server running on port 3000 
2025-05-28 21:57:24 info: Database synchronized successfully 
2025-05-28 21:57:29 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:57:29 info: Server running on port 3000 
2025-05-28 21:57:32 info: Database synchronized successfully 
2025-05-28 21:57:34 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:57:34 info: Server running on port 3000 
2025-05-28 21:57:36 info: Database synchronized successfully 
2025-05-28 21:58:49 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:58:49 info: Server running on port 3000 
2025-05-28 21:58:52 info: Database synchronized successfully 
2025-05-28 21:58:55 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:58:55 info: Server running on port 3000 
2025-05-28 21:58:56 info: Database synchronized successfully 
2025-05-28 21:59:03 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:59:03 info: Server running on port 3000 
2025-05-28 21:59:06 info: Database synchronized successfully 
2025-05-28 21:59:08 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 21:59:08 info: Server running on port 3000 
2025-05-28 21:59:10 info: Database synchronized successfully 
2025-05-28 21:59:10 info: Verifying FatSecret API connection... 
2025-05-28 21:59:10 info: Requesting new FatSecret access token 
2025-05-28 21:59:12 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_client"}}
2025-05-28 21:59:12 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 21:59:12 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 21:59:12 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:01:15 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:01:15 info: Server running on port 3000 
2025-05-28 22:01:18 info: Database synchronized successfully 
2025-05-28 22:01:18 info: Verifying FatSecret API connection... 
2025-05-28 22:01:18 info: Requesting new FatSecret access token 
2025-05-28 22:01:20 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:01:20 info: Server running on port 3000 
2025-05-28 22:01:22 info: Database synchronized successfully 
2025-05-28 22:01:22 info: Verifying FatSecret API connection... 
2025-05-28 22:01:22 info: Requesting new FatSecret access token 
2025-05-28 22:01:23 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_client"}}
2025-05-28 22:01:23 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:01:23 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:01:23 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:01:39 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:01:40 info: Server running on port 3000 
2025-05-28 22:01:42 info: Database synchronized successfully 
2025-05-28 22:01:42 info: Verifying FatSecret API connection... 
2025-05-28 22:01:42 info: Requesting new FatSecret access token 
2025-05-28 22:01:42 error: Error getting FatSecret access token: {"error":"Cannot read properties of undefined (reading 'join')"}
2025-05-28 22:01:42 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:01:42 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:01:42 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:03:06 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:03:07 info: Server running on port 3000 
2025-05-28 22:03:09 info: Database synchronized successfully 
2025-05-28 22:03:09 info: Verifying FatSecret API connection... 
2025-05-28 22:03:09 info: Requesting new FatSecret access token 
2025-05-28 22:03:09 error: Error getting FatSecret access token: {"error":"Cannot read properties of undefined (reading 'join')"}
2025-05-28 22:03:09 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:03:09 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:03:09 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:03:13 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:03:13 info: Server running on port 3000 
2025-05-28 22:03:15 info: Database synchronized successfully 
2025-05-28 22:03:15 info: Verifying FatSecret API connection... 
2025-05-28 22:03:15 info: Requesting new FatSecret access token 
2025-05-28 22:03:16 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_client"}}
2025-05-28 22:03:16 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:03:16 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:03:16 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:03:32 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:03:32 info: Server running on port 3000 
2025-05-28 22:03:34 info: Database synchronized successfully 
2025-05-28 22:03:34 info: Verifying FatSecret API connection... 
2025-05-28 22:03:34 info: Requesting new FatSecret access token 
2025-05-28 22:03:36 error: Error getting FatSecret access token: {"error":"Request failed with status code 400","status":400,"data":{"error":"invalid_client"}}
2025-05-28 22:03:36 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:03:36 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:03:36 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:04:11 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:04:11 info: Server running on port 3000 
2025-05-28 22:04:13 info: Database synchronized successfully 
2025-05-28 22:04:13 info: Verifying FatSecret API connection... 
2025-05-28 22:04:13 info: Requesting new FatSecret access token 
2025-05-28 22:06:47 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:06:47 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:06:47 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:06:48 info: Server running on port 3000 
2025-05-28 22:06:51 info: Database synchronized successfully 
2025-05-28 22:06:51 info: Verifying FatSecret API connection... 
2025-05-28 22:06:51 info: Requesting new FatSecret access token 
2025-05-28 22:06:52 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:06:52 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:06:52 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:06:52 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:07:09 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:07:09 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:07:09 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:07:09 info: Server running on port 3000 
2025-05-28 22:07:12 info: Database synchronized successfully 
2025-05-28 22:07:12 info: Verifying FatSecret API connection... 
2025-05-28 22:07:12 info: Requesting new FatSecret access token 
2025-05-28 22:07:14 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:07:14 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:07:14 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:07:14 info: Server running on port 3000 
2025-05-28 22:07:16 info: Database synchronized successfully 
2025-05-28 22:07:16 info: Verifying FatSecret API connection... 
2025-05-28 22:07:16 info: Requesting new FatSecret access token 
2025-05-28 22:07:17 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:07:17 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:07:17 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:07:17 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:07:23 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:07:23 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:07:23 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:07:23 info: Server running on port 3000 
2025-05-28 22:07:25 info: Database synchronized successfully 
2025-05-28 22:07:25 info: Verifying FatSecret API connection... 
2025-05-28 22:07:25 info: Requesting new FatSecret access token 
2025-05-28 22:07:27 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:07:27 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:07:27 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:07:27 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:07:29 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:07:29 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:07:29 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:07:29 info: Server running on port 3000 
2025-05-28 22:07:31 info: Database synchronized successfully 
2025-05-28 22:07:31 info: Verifying FatSecret API connection... 
2025-05-28 22:07:31 info: Requesting new FatSecret access token 
2025-05-28 22:07:32 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:07:32 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:07:32 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:07:32 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:07:37 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:07:37 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:07:37 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:07:37 info: Server running on port 3000 
2025-05-28 22:07:39 info: Database synchronized successfully 
2025-05-28 22:07:39 info: Verifying FatSecret API connection... 
2025-05-28 22:07:39 info: Requesting new FatSecret access token 
2025-05-28 22:07:41 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:07:41 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:07:41 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:07:42 info: Server running on port 3000 
2025-05-28 22:07:43 info: Database synchronized successfully 
2025-05-28 22:07:43 info: Verifying FatSecret API connection... 
2025-05-28 22:07:43 info: Requesting new FatSecret access token 
2025-05-28 22:07:45 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:07:45 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:07:45 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:07:45 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:08:15 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:08:15 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:08:15 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:08:16 info: Server running on port 3000 
2025-05-28 22:08:18 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:08:18 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:08:18 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:08:19 info: Server running on port 3000 
2025-05-28 22:08:21 info: Database synchronized successfully 
2025-05-28 22:08:21 info: Verifying FatSecret API connection... 
2025-05-28 22:08:21 info: Requesting new FatSecret access token 
2025-05-28 22:08:23 info: Successfully obtained FatSecret access token 
2025-05-28 22:08:23 info: Getting nutrition data for meal: {"name":"Grilled Chicken Salad"}
2025-05-28 22:08:24 warn: No nutrition data found for meal: {"name":"Grilled Chicken Salad"}
2025-05-28 22:08:24 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:08:24 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:09:45 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:09:45 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:09:45 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:09:45 info: Server running on port 3000 
2025-05-28 22:09:47 info: Database synchronized successfully 
2025-05-28 22:09:47 info: Verifying FatSecret API connection... 
2025-05-28 22:09:47 info: Requesting new FatSecret access token 
2025-05-28 22:09:49 info: Successfully obtained FatSecret access token 
2025-05-28 22:09:49 info: Getting nutrition data for meal: {"name":"Grilled Chicken Salad"}
2025-05-28 22:09:51 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:09:51 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:09:51 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:09:51 info: Server running on port 3000 
2025-05-28 22:09:53 info: Database synchronized successfully 
2025-05-28 22:09:53 info: Verifying FatSecret API connection... 
2025-05-28 22:09:53 info: Requesting new FatSecret access token 
2025-05-28 22:09:56 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:09:56 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:09:56 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:09:56 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:10:37 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:10:37 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:10:37 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:10:37 info: Server running on port 3000 
2025-05-28 22:10:40 info: Database synchronized successfully 
2025-05-28 22:10:40 info: Verifying FatSecret API connection... 
2025-05-28 22:10:40 info: Requesting new FatSecret access token 
2025-05-28 22:10:41 error: Error getting FatSecret access token: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:10:41 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Failed to authenticate with FatSecret API"}
2025-05-28 22:10:41 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:10:41 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:10:42 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:10:42 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:10:42 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:10:43 info: Server running on port 3000 
2025-05-28 22:10:44 info: Database synchronized successfully 
2025-05-28 22:10:44 info: Verifying FatSecret API connection... 
2025-05-28 22:10:44 info: Requesting new FatSecret access token 
2025-05-28 22:10:46 error: Invalid FatSecret scope: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:10:46 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Invalid FatSecret scope. Please check the API documentation for correct scope format."}
2025-05-28 22:10:46 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:10:46 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-28 22:35:42 info: Initializing NutritionCache with 24-hour TTL 
2025-05-28 22:35:42 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-28 22:35:42 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-28 22:35:42 info: Server running on port 3000 
2025-05-28 22:35:45 info: Database synchronized successfully 
2025-05-28 22:35:45 info: Verifying FatSecret API connection... 
2025-05-28 22:35:45 info: Requesting new FatSecret access token 
2025-05-28 22:35:48 error: Invalid FatSecret scope: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-28 22:35:48 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Invalid FatSecret scope. Please check the API documentation for correct scope format."}
2025-05-28 22:35:48 error: FatSecret API verification failed: No nutrition data received 
2025-05-28 22:35:48 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-30 19:20:55 info: Initializing NutritionCache with 24-hour TTL 
2025-05-30 19:20:55 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-30 19:20:55 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-30 19:20:55 info: Server running on port 3000 
2025-05-30 19:20:59 info: Database synchronized successfully 
2025-05-30 19:20:59 info: Verifying FatSecret API connection... 
2025-05-30 19:20:59 info: Requesting new FatSecret access token 
2025-05-30 19:21:00 error: Invalid FatSecret scope: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-30 19:21:00 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Invalid FatSecret scope. Please check the API documentation for correct scope format."}
2025-05-30 19:21:00 error: FatSecret API verification failed: No nutrition data received 
2025-05-30 19:21:00 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-30 19:28:31 info: Initializing NutritionCache with 24-hour TTL 
2025-05-30 19:28:31 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-30 19:28:31 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-30 19:28:32 info: Server running on port 3000 
2025-05-30 19:28:35 info: Database synchronized successfully 
2025-05-30 19:28:35 info: Verifying FatSecret API connection... 
2025-05-30 19:28:35 info: Requesting new FatSecret access token 
2025-05-30 19:28:37 error: Invalid FatSecret scope: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-30 19:28:37 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Invalid FatSecret scope. Please check the API documentation for correct scope format."}
2025-05-30 19:28:37 error: FatSecret API verification failed: No nutrition data received 
2025-05-30 19:28:37 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-30 19:28:49 info: Initializing NutritionCache with 24-hour TTL 
2025-05-30 19:28:49 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-30 19:28:49 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-30 19:28:49 info: Server running on port 3000 
2025-05-30 19:28:51 info: Database synchronized successfully 
2025-05-30 19:28:51 info: Verifying FatSecret API connection... 
2025-05-30 19:28:51 info: Requesting new FatSecret access token 
2025-05-30 19:28:53 info: Successfully obtained FatSecret access token 
2025-05-30 19:28:53 info: Getting nutrition data for meal: {"name":"Grilled Chicken Salad"}
2025-05-30 19:28:55 warn: No nutrition data found for meal: {"name":"Grilled Chicken Salad"}
2025-05-30 19:28:55 error: FatSecret API verification failed: No nutrition data received 
2025-05-30 19:28:55 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-31 12:40:07 info: Initializing NutritionCache with 24-hour TTL 
2025-05-31 12:40:07 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-31 12:40:07 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-31 12:40:07 info: Server running on port 3000 
2025-05-31 12:40:19 error: Initialization error: getaddrinfo ENOTFOUND ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech {"name":"SequelizeHostNotFoundError","parent":{"errno":-3008,"code":"ENOTFOUND","syscall":"getaddrinfo","hostname":"ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech"},"original":{"errno":-3008,"code":"ENOTFOUND","syscall":"getaddrinfo","hostname":"ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech"},"stack":"SequelizeHostNotFoundError: getaddrinfo ENOTFOUND ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech\n    at Client._connectionCallback (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\connection-manager.js:136:24)\n    at Client._handleErrorWhileConnecting (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:336:19)\n    at Client._handleErrorEvent (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:346:19)\n    at Connection.emit (node:events:518:28)\n    at Socket.reportStreamError (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\connection.js:57:12)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:169:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)"}
2025-05-31 12:40:47 info: Initializing NutritionCache with 24-hour TTL 
2025-05-31 12:40:47 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-31 12:40:47 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-31 12:40:47 info: Server running on port 3000 
2025-05-31 12:40:51 info: Database synchronized successfully 
2025-05-31 12:40:51 info: Verifying FatSecret API connection... 
2025-05-31 12:40:51 info: Requesting new FatSecret access token 
2025-05-31 12:40:53 info: Successfully obtained FatSecret access token 
2025-05-31 12:40:53 info: Getting nutrition data for meal: {"name":"Grilled Chicken Salad"}
2025-05-31 12:40:55 warn: No nutrition data found for meal: {"name":"Grilled Chicken Salad"}
2025-05-31 12:40:55 error: FatSecret API verification failed: No nutrition data received 
2025-05-31 12:40:55 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-31 12:41:54 info: Initializing NutritionCache with 24-hour TTL 
2025-05-31 12:41:54 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-31 12:41:54 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-31 12:41:54 info: Server running on port 3000 
2025-05-31 12:41:55 error: Initialization error: getaddrinfo ENOTFOUND ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech {"name":"SequelizeHostNotFoundError","parent":{"errno":-3008,"code":"ENOTFOUND","syscall":"getaddrinfo","hostname":"ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech"},"original":{"errno":-3008,"code":"ENOTFOUND","syscall":"getaddrinfo","hostname":"ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech"},"stack":"SequelizeHostNotFoundError: getaddrinfo ENOTFOUND ep-purple-sun-a1pl2mcg-pooler.ap-southeast-1.aws.neon.tech\n    at Client._connectionCallback (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\sequelize\\lib\\dialects\\postgres\\connection-manager.js:136:24)\n    at Client._handleErrorWhileConnecting (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:336:19)\n    at Client._handleErrorEvent (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\client.js:346:19)\n    at Connection.emit (node:events:518:28)\n    at Socket.reportStreamError (C:\\Users\\Harish Karthick S\\Documents\\Kalvium\\Semester-4\\Startup\\Di-Twin\\Meal-Generator\\node_modules\\pg\\lib\\connection.js:57:12)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:169:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:128:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)"}
2025-05-31 12:42:12 info: Initializing NutritionCache with 24-hour TTL 
2025-05-31 12:42:12 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-31 12:42:12 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-31 12:42:13 info: Server running on port 3000 
2025-05-31 12:42:15 info: Database synchronized successfully 
2025-05-31 12:42:15 info: Verifying FatSecret API connection... 
2025-05-31 12:42:15 info: Requesting new FatSecret access token 
2025-05-31 12:42:17 error: Invalid FatSecret scope: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-31 12:42:17 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Invalid FatSecret scope. Please check the API documentation for correct scope format."}
2025-05-31 12:42:17 error: FatSecret API verification failed: No nutrition data received 
2025-05-31 12:42:17 error: FatSecret API verification failed. Some features may not work correctly. 
2025-05-31 12:46:41 info: Initializing NutritionCache with 24-hour TTL 
2025-05-31 12:46:41 info: FatSecretService initialized with client ID: {"clientId":"f6fc..."}
2025-05-31 12:46:41 info: Environment variables loaded: {"fatSecretClientId":"Set","fatSecretClientSecret":"Set"}
2025-05-31 12:46:42 info: Server running on port 3000 
2025-05-31 12:46:44 info: Database synchronized successfully 
2025-05-31 12:46:44 info: Verifying FatSecret API connection... 
2025-05-31 12:46:44 info: Requesting new FatSecret access token 
2025-05-31 12:46:45 error: Invalid FatSecret scope: Request failed with status code 400 {"status":400,"data":{"error":"invalid_scope"},"clientIdPrefix":"f6fc..."}
2025-05-31 12:46:45 error: Error getting meal nutrition data: {"meal":"Grilled Chicken Salad","error":"Invalid FatSecret scope. Please check the API documentation for correct scope format."}
2025-05-31 12:46:45 error: FatSecret API verification failed: No nutrition data received 
2025-05-31 12:46:45 error: FatSecret API verification failed. Some features may not work correctly. 
